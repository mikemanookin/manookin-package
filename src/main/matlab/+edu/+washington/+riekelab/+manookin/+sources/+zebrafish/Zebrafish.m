classdef Zebrafish < edu.washington.riekelab.sources.Subject
    
    methods
        
        function obj = Zebrafish()
            import symphonyui.core.*;
            import edu.washington.*;
            
            obj.addProperty('genotype', {}, ...
                'type', PropertyType('cellstr', 'row', {'wild type', 'VSX1:mCerulean', 'VSX2:?'}), ... 
                'description', 'Genetic strain');
            
            photoreceptors = containers.Map();
            photoreceptors('lCone') = struct( ...
                'collectingArea', 0.55, ...
                'spectrum', importdata(riekelab.Package.getResource('photoreceptors', 'zebrafish', 'l_cone_spectrum.txt')));
            photoreceptors('mCone') = struct( ...
                'collectingArea', 0.55, ...
                'spectrum', importdata(riekelab.Package.getResource('photoreceptors', 'zebrafish', 'm_cone_spectrum.txt')));
            photoreceptors('rod') = struct( ...
                'collectingArea', 0.63, ...
                'spectrum', importdata(riekelab.Package.getResource('photoreceptors', 'zebrafish', 'rod_spectrum.txt')));
            photoreceptors('sCone') = struct( ...
                'collectingArea', 0.55, ...
                'spectrum', importdata(riekelab.Package.getResource('photoreceptors', 'zebrafish', 's_cone_spectrum.txt')));
            photoreceptors('uvCone') = struct( ...
                'collectingArea', 0.55, ...
                'spectrum', importdata(riekelab.Package.getResource('photoreceptors', 'zebrafish', 'uv_cone_spectrum.txt')));
            obj.addResource('photoreceptors', photoreceptors);
            
            obj.addAllowableParentType([]);
        end
        
    end
    
end

